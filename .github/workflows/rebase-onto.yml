name: Rebase and Force Push PR

on:
  issue_comment:
    types: [created]

jobs:
  rebase_and_force_push:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.html_url, '/pull/') && startsWith(github.event.comment.body, '/rebase --onto ')

    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Rebase onto specified branch and force push
        run: |

          git config --global user.name "githubactions"
          git config --global user.email "githubactions@example.com"

          body="${{ github.event.comment.body }}"
          echo $body
          echo "Get Command"
          command=$(echo "${body}" | sed 's@/@@')
          echo $command

          IFS=' ' read -r -a array <<< "$command"

          newBaseBranch=${array[2]}
          echo $newBaseBranch
          oldBaseBranch=${array[3]}
          echo $oldBaseBranch
          headBranch=${array[4]}
          echo $headBranch
          
          echo "Fetch Start"
          git fetch origin
          
          echo "checkout Start (init)"
          git checkout ${oldBaseBranch}
          git checkout ${newBaseBranch}
          git checkout ${headBranch}

          echo "Rebase Start git $command"
          git $command
          echo "Push Start"
          git push --force origin ${headBranch}

          exit 0
      
      - name: Handle success
        if: ${{ success() }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueComment = context.issue.comment;
            const response = "Success ${{ github.event.comment.body }}";
            await github.issues.createComment({...issueComment, body: response});

      - name: Handle failure
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueComment = context.issue.comment;
            const response = "Failed ${{ github.event.comment.body }}";
            await github.issues.createComment({...issueComment, body: response});
      