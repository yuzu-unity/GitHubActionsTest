name: Rebase and Force Push PR

on:
  issue_comment:
    types: [created]

jobs:
  rebase_and_force_push:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check if comment contains rebase onto command
        id: check
        run: |
          body="${{ github.event.comment.body }}"
          echo $body
          branchName=$(echo "${body}" | sed 's@/rebase onto by @@')
          echo $branchName
          echo "::set-output name=branchName::$branchName"
          PR=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.issue.pull_request.url }})
          echo "::set-output name=headBranchName::$(echo $PR | jq -r '.head.ref')"
          echo "::set-output name=baseBranchName::$(echo $PR | jq -r '.base.ref')"

      - name: Checkout repository
        if: ${{ steps.check.outputs.branchName != '' }}
        uses: actions/checkout@v2

      - name: Rebase onto specified branch and force push
        if: ${{ steps.check.outputs.branchName != '' }}
        run: |
          branchName=${{ steps.check.outputs.branchName }}
          headBranchName=${{ steps.check.outputs.headBranchName }}
          baseBranchName=${{ steps.check.outputs.baseBranchName }}
          echo $branchName
          echo $headBranchName
          echo $baseBranchName

          if [ -n "$branchName" ]; then
            git ls-remote origin "$branchName" >/dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "Fetch Start"
              git fetch origin
              echo "Rebase Start"
              git rebase --onto ${baseBranchName} ${branchName} ${headBranchName}
              echo "Push Start"
              git push ${headBranchName} --force
            else
              echo "Branch $branchName does not exist."
              exit 1
            fi
          fi
          